'use strict';

<<<<<<< HEAD
function createArg(key, val) {
	key = key.replace(/[A-Z]/g, '-$&').toLowerCase();
	return '--' + key + (val ? '=' + val : '');
};

module.exports = function (opts, excludes, includes) {
	var args = [];

	Object.keys(opts).forEach(function (key) {
		var val = opts[key];

		if (Array.isArray(excludes) && excludes.indexOf(key) !== -1) {
			return;
		}

		if (Array.isArray(includes) && includes.indexOf(key) === -1) {
=======
var escape = function (value) {
	return value.replace(/'/g, "'\''");
};

var constructOption = function (name, value) {
	name = name.replace(/[A-Z]/g, '-$&').toLowerCase();
	//var quotedVal = /\s/.test(value) ? ("'" + escape(value) + "'") : value;

	return '--' + name + (value ? "=" + value : '');
};

module.exports = function (options, excludes) {
	var args = [];

	Object.keys(options).forEach(function (name) {
		var val = options[name];

		if (Array.isArray(excludes) && excludes.indexOf(name) !== -1) {
>>>>>>> 77248ddeca2a06bcb9bfad12e8cf263b7d7c3854
			return;
		}

		if (val === true) {
<<<<<<< HEAD
			args.push(createArg(key));
		}

		if (typeof val === 'string') {
			args.push(createArg(key, val));
		}

		if (typeof val === 'number' && isNaN(val) === false) {
			args.push(createArg(key, '' + val));
=======
			args.push(constructOption(name));
		}

		if (typeof val === 'string') {
			args.push(constructOption(name, val));
		}

		if (typeof val === 'number' && isNaN(val) === false) {
			args.push(constructOption(name, '' + val));
>>>>>>> 77248ddeca2a06bcb9bfad12e8cf263b7d7c3854
		}

		if (Array.isArray(val)) {
			val.forEach(function (arrVal) {
<<<<<<< HEAD
				args.push(createArg(key, arrVal));
=======
				args.push(constructOption(name, arrVal));
>>>>>>> 77248ddeca2a06bcb9bfad12e8cf263b7d7c3854
			});
		}
	});

	return args;
};
